// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin-manager.proto

/*
Package plugin_manager is a generated protocol buffer package.

It is generated from these files:
	plugin-manager.proto

It has these top-level messages:
	DeviceRegisterRequest
	DeviceRegisterReply
*/
package plugin_manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceRegisterRequest struct {
	DeviceType string `protobuf:"bytes,1,opt,name=deviceType" json:"deviceType,omitempty"`
	SocketPath string `protobuf:"bytes,2,opt,name=socketPath" json:"socketPath,omitempty"`
}

func (m *DeviceRegisterRequest) Reset()                    { *m = DeviceRegisterRequest{} }
func (m *DeviceRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceRegisterRequest) ProtoMessage()               {}
func (*DeviceRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceRegisterRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceRegisterRequest) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

type DeviceRegisterReply struct {
	RegisterResult bool `protobuf:"varint,1,opt,name=registerResult" json:"registerResult,omitempty"`
}

func (m *DeviceRegisterReply) Reset()                    { *m = DeviceRegisterReply{} }
func (m *DeviceRegisterReply) String() string            { return proto.CompactTextString(m) }
func (*DeviceRegisterReply) ProtoMessage()               {}
func (*DeviceRegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeviceRegisterReply) GetRegisterResult() bool {
	if m != nil {
		return m.RegisterResult
	}
	return false
}

func init() {
	proto.RegisterType((*DeviceRegisterRequest)(nil), "plugin_manager.DeviceRegisterRequest")
	proto.RegisterType((*DeviceRegisterReply)(nil), "plugin_manager.DeviceRegisterReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Register service

type RegisterClient interface {
	RegisterHandler(ctx context.Context, in *DeviceRegisterRequest, opts ...grpc.CallOption) (*DeviceRegisterReply, error)
}

type registerClient struct {
	cc *grpc.ClientConn
}

func NewRegisterClient(cc *grpc.ClientConn) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) RegisterHandler(ctx context.Context, in *DeviceRegisterRequest, opts ...grpc.CallOption) (*DeviceRegisterReply, error) {
	out := new(DeviceRegisterReply)
	err := grpc.Invoke(ctx, "/plugin_manager.Register/RegisterHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Register service

type RegisterServer interface {
	RegisterHandler(context.Context, *DeviceRegisterRequest) (*DeviceRegisterReply, error)
}

func RegisterRegisterServer(s *grpc.Server, srv RegisterServer) {
	s.RegisterService(&_Register_serviceDesc, srv)
}

func _Register_RegisterHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).RegisterHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin_manager.Register/RegisterHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).RegisterHandler(ctx, req.(*DeviceRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Register_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugin_manager.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHandler",
			Handler:    _Register_RegisterHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin-manager.proto",
}

func init() { proto.RegisterFile("plugin-manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xc8, 0x29, 0x4d,
	0xcf, 0xcc, 0xd3, 0xcd, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x83, 0x88, 0xc6, 0x43, 0x45, 0x95, 0xc2, 0xb9, 0x44, 0x5d, 0x52, 0xcb, 0x32, 0x93,
	0x53, 0x83, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0x52, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xe4, 0xb8, 0xb8, 0x52, 0xc0, 0x12, 0x21, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x48, 0x22, 0x20, 0xf9, 0xe2, 0xfc, 0xe4, 0xec, 0xd4, 0x92, 0x80, 0xc4, 0x92, 0x0c,
	0x09, 0x26, 0x88, 0x3c, 0x42, 0x44, 0xc9, 0x96, 0x4b, 0x18, 0xdd, 0xe0, 0x82, 0x9c, 0x4a, 0x21,
	0x35, 0x2e, 0xbe, 0x22, 0xb8, 0x40, 0x71, 0x69, 0x4e, 0x09, 0xd8, 0x68, 0x8e, 0x20, 0x34, 0x51,
	0xa3, 0x6c, 0x2e, 0x0e, 0x98, 0x46, 0xa1, 0x78, 0x2e, 0x7e, 0x18, 0xdb, 0x23, 0x31, 0x2f, 0x25,
	0x27, 0xb5, 0x48, 0x48, 0x55, 0x0f, 0xd5, 0x1f, 0x7a, 0x58, 0x3d, 0x21, 0xa5, 0x4c, 0x48, 0x59,
	0x41, 0x4e, 0xa5, 0x12, 0x43, 0x12, 0x1b, 0x38, 0x6c, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xbe, 0x94, 0x5f, 0xaf, 0x33, 0x01, 0x00, 0x00,
}
