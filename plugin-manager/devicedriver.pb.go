// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devicedriver.proto

/*
Package plugin_manager is a generated protocol buffer package.

It is generated from these files:
	devicedriver.proto

It has these top-level messages:
	Empty
	Integer
	Devices
	Device
	TopologyInfo
	NUMANode
	HelloRequest
	HelloReply
*/
package plugin_manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Integer struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Integer) Reset()                    { *m = Integer{} }
func (m *Integer) String() string            { return proto.CompactTextString(m) }
func (*Integer) ProtoMessage()               {}
func (*Integer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Integer) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Devices struct {
	Device []*Device `protobuf:"bytes,1,rep,name=device" json:"device,omitempty"`
}

func (m *Devices) Reset()                    { *m = Devices{} }
func (m *Devices) String() string            { return proto.CompactTextString(m) }
func (*Devices) ProtoMessage()               {}
func (*Devices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Devices) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type Device struct {
	// A unique ID assigned by the device plugin used
	// to identify devices during the communication
	// Max length of this field is 63 characters
	ID string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	// Health of the device, can be healthy or unhealthy, see constants.go
	Health string `protobuf:"bytes,2,opt,name=health" json:"health,omitempty"`
	// Topology for device
	Topology *TopologyInfo `protobuf:"bytes,3,opt,name=topology" json:"topology,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Device) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Device) GetHealth() string {
	if m != nil {
		return m.Health
	}
	return ""
}

func (m *Device) GetTopology() *TopologyInfo {
	if m != nil {
		return m.Topology
	}
	return nil
}

type TopologyInfo struct {
	Nodes []*NUMANode `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *TopologyInfo) Reset()                    { *m = TopologyInfo{} }
func (m *TopologyInfo) String() string            { return proto.CompactTextString(m) }
func (*TopologyInfo) ProtoMessage()               {}
func (*TopologyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TopologyInfo) GetNodes() []*NUMANode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NUMANode struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *NUMANode) Reset()                    { *m = NUMANode{} }
func (m *NUMANode) String() string            { return proto.CompactTextString(m) }
func (*NUMANode) ProtoMessage()               {}
func (*NUMANode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NUMANode) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// HelloRequest 请求数据格式
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HelloReply 响应数据格式
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "plugin_manager.Empty")
	proto.RegisterType((*Integer)(nil), "plugin_manager.Integer")
	proto.RegisterType((*Devices)(nil), "plugin_manager.Devices")
	proto.RegisterType((*Device)(nil), "plugin_manager.Device")
	proto.RegisterType((*TopologyInfo)(nil), "plugin_manager.TopologyInfo")
	proto.RegisterType((*NUMANode)(nil), "plugin_manager.NUMANode")
	proto.RegisterType((*HelloRequest)(nil), "plugin_manager.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "plugin_manager.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceDriver service

type DeviceDriverClient interface {
	GetDeviceParts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error)
	GetDeviceLoads(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error)
	WatchDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DeviceDriver_WatchDeviceClient, error)
}

type deviceDriverClient struct {
	cc *grpc.ClientConn
}

func NewDeviceDriverClient(cc *grpc.ClientConn) DeviceDriverClient {
	return &deviceDriverClient{cc}
}

func (c *deviceDriverClient) GetDeviceParts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := grpc.Invoke(ctx, "/plugin_manager.DeviceDriver/GetDeviceParts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDriverClient) GetDeviceLoads(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error) {
	out := new(Integer)
	err := grpc.Invoke(ctx, "/plugin_manager.DeviceDriver/GetDeviceLoads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDriverClient) WatchDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DeviceDriver_WatchDeviceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DeviceDriver_serviceDesc.Streams[0], c.cc, "/plugin_manager.DeviceDriver/WatchDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDriverWatchDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDriver_WatchDeviceClient interface {
	Recv() (*Devices, error)
	grpc.ClientStream
}

type deviceDriverWatchDeviceClient struct {
	grpc.ClientStream
}

func (x *deviceDriverWatchDeviceClient) Recv() (*Devices, error) {
	m := new(Devices)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DeviceDriver service

type DeviceDriverServer interface {
	GetDeviceParts(context.Context, *Empty) (*Devices, error)
	GetDeviceLoads(context.Context, *Empty) (*Integer, error)
	WatchDevice(*Empty, DeviceDriver_WatchDeviceServer) error
}

func RegisterDeviceDriverServer(s *grpc.Server, srv DeviceDriverServer) {
	s.RegisterService(&_DeviceDriver_serviceDesc, srv)
}

func _DeviceDriver_GetDeviceParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDriverServer).GetDeviceParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin_manager.DeviceDriver/GetDeviceParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDriverServer).GetDeviceParts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDriver_GetDeviceLoads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDriverServer).GetDeviceLoads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin_manager.DeviceDriver/GetDeviceLoads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDriverServer).GetDeviceLoads(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDriver_WatchDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDriverServer).WatchDevice(m, &deviceDriverWatchDeviceServer{stream})
}

type DeviceDriver_WatchDeviceServer interface {
	Send(*Devices) error
	grpc.ServerStream
}

type deviceDriverWatchDeviceServer struct {
	grpc.ServerStream
}

func (x *deviceDriverWatchDeviceServer) Send(m *Devices) error {
	return x.ServerStream.SendMsg(m)
}

var _DeviceDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugin_manager.DeviceDriver",
	HandlerType: (*DeviceDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceParts",
			Handler:    _DeviceDriver_GetDeviceParts_Handler,
		},
		{
			MethodName: "GetDeviceLoads",
			Handler:    _DeviceDriver_GetDeviceLoads_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDevice",
			Handler:       _DeviceDriver_WatchDevice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "devicedriver.proto",
}

func init() { proto.RegisterFile("devicedriver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xeb, 0x40,
	0x14, 0x85, 0x9b, 0xf6, 0x25, 0xe9, 0xbb, 0x2d, 0x5d, 0x5c, 0xde, 0xeb, 0x0b, 0xe5, 0x81, 0x65,
	0x16, 0xd2, 0x55, 0x90, 0xba, 0xd1, 0x8d, 0x50, 0x89, 0x68, 0x41, 0x8b, 0x04, 0xc5, 0xa5, 0x8c,
	0xcd, 0x35, 0x8d, 0x24, 0x99, 0x98, 0x99, 0x16, 0xfa, 0x53, 0xfd, 0x37, 0xe2, 0xcc, 0x54, 0xda,
	0xe2, 0x42, 0x77, 0xb9, 0xe7, 0x1e, 0xbe, 0x9c, 0xdc, 0x13, 0xc0, 0x84, 0x56, 0xd9, 0x9c, 0x92,
	0x3a, 0x5b, 0x51, 0x1d, 0x56, 0xb5, 0x50, 0x02, 0x7b, 0x55, 0xbe, 0x4c, 0xb3, 0xf2, 0xb1, 0xe0,
	0x25, 0x4f, 0xa9, 0x66, 0x3e, 0xb8, 0x17, 0x45, 0xa5, 0xd6, 0xec, 0x00, 0xfc, 0x69, 0xa9, 0x28,
	0xa5, 0x1a, 0xff, 0x80, 0xbb, 0xe2, 0xf9, 0x92, 0x02, 0x67, 0xe8, 0x8c, 0xdc, 0xd8, 0x0c, 0xec,
	0x14, 0xfc, 0x48, 0xf3, 0x24, 0x86, 0xe0, 0x19, 0x74, 0xe0, 0x0c, 0x5b, 0xa3, 0xce, 0xb8, 0x1f,
	0xee, 0x52, 0x43, 0x63, 0x8c, 0xad, 0x8b, 0xbd, 0x80, 0x67, 0x14, 0xec, 0x41, 0x73, 0x1a, 0x69,
	0xee, 0xef, 0xb8, 0x99, 0x45, 0xd8, 0x07, 0x6f, 0x41, 0x3c, 0x57, 0x8b, 0xa0, 0xa9, 0x35, 0x3b,
	0xe1, 0x09, 0xb4, 0x95, 0xa8, 0x44, 0x2e, 0xd2, 0x75, 0xd0, 0x1a, 0x3a, 0xa3, 0xce, 0xf8, 0xff,
	0xfe, 0x3b, 0xee, 0xec, 0x7e, 0x5a, 0x3e, 0x8b, 0xf8, 0xd3, 0xcd, 0xce, 0xa0, 0xbb, 0xbd, 0xc1,
	0x10, 0xdc, 0x52, 0x24, 0x24, 0x6d, 0xd4, 0x60, 0x1f, 0x33, 0xbb, 0xbf, 0x99, 0xcc, 0x44, 0x42,
	0xb1, 0xb1, 0xb1, 0x01, 0xb4, 0x37, 0xd2, 0x56, 0xda, 0xd6, 0x47, 0x5a, 0xc6, 0xa0, 0x7b, 0x45,
	0x79, 0x2e, 0x62, 0x7a, 0x5d, 0x92, 0x54, 0x88, 0xf0, 0xab, 0xe4, 0x05, 0xd9, 0xef, 0xd1, 0xcf,
	0xec, 0x10, 0xc0, 0x7a, 0xaa, 0x7c, 0x8d, 0x01, 0xf8, 0x05, 0x49, 0xc9, 0xd3, 0x8d, 0x69, 0x33,
	0x8e, 0xdf, 0x1c, 0xe8, 0x9a, 0xa3, 0x44, 0xba, 0x1f, 0x3c, 0x87, 0xde, 0x25, 0x29, 0x23, 0xdd,
	0xf2, 0x5a, 0x49, 0xfc, 0xbb, 0x9f, 0x55, 0x37, 0x35, 0xf8, 0xf7, 0xf5, 0xb5, 0x25, 0x6b, 0xec,
	0x30, 0xae, 0x05, 0x4f, 0xbe, 0xcf, 0xb0, 0xdd, 0xb3, 0x06, 0x4e, 0xa0, 0xf3, 0xc0, 0xd5, 0x7c,
	0x61, 0x1b, 0xfb, 0x71, 0x88, 0x23, 0xe7, 0xc9, 0xd3, 0xff, 0xda, 0xf1, 0x7b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x15, 0x5e, 0x2b, 0x46, 0x81, 0x02, 0x00, 0x00,
}
