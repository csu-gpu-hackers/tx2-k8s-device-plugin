// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vdevice-manager.proto

/*
Package vDevice_manager is a generated protocol buffer package.

It is generated from these files:
	vdevice-manager.proto

It has these top-level messages:
	VDeviceRequest
	VDeviceResponse
*/
package vDevice_manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VDeviceResponse_ReasonType int32

const (
	VDeviceResponse_INSUFFICIENT_RESOURCE VDeviceResponse_ReasonType = 0
	VDeviceResponse_DEVICE_OFFLINE        VDeviceResponse_ReasonType = 1
	VDeviceResponse_RESOURCE_SEIZED       VDeviceResponse_ReasonType = 2
)

var VDeviceResponse_ReasonType_name = map[int32]string{
	0: "INSUFFICIENT_RESOURCE",
	1: "DEVICE_OFFLINE",
	2: "RESOURCE_SEIZED",
}
var VDeviceResponse_ReasonType_value = map[string]int32{
	"INSUFFICIENT_RESOURCE": 0,
	"DEVICE_OFFLINE":        1,
	"RESOURCE_SEIZED":       2,
}

func (x VDeviceResponse_ReasonType) String() string {
	return proto.EnumName(VDeviceResponse_ReasonType_name, int32(x))
}
func (VDeviceResponse_ReasonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type VDeviceRequest struct {
	ContainerID       string `protobuf:"bytes,1,opt,name=ContainerID,json=containerID" json:"ContainerID,omitempty"`
	RequestVDeviceNum int32  `protobuf:"varint,2,opt,name=RequestVDeviceNum,json=requestVDeviceNum" json:"RequestVDeviceNum,omitempty"`
}

func (m *VDeviceRequest) Reset()                    { *m = VDeviceRequest{} }
func (m *VDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*VDeviceRequest) ProtoMessage()               {}
func (*VDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VDeviceRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *VDeviceRequest) GetRequestVDeviceNum() int32 {
	if m != nil {
		return m.RequestVDeviceNum
	}
	return 0
}

type VDeviceResponse struct {
	Result bool                       `protobuf:"varint,1,opt,name=Result,json=result" json:"Result,omitempty"`
	Reason VDeviceResponse_ReasonType `protobuf:"varint,2,opt,name=Reason,json=reason,enum=vDevice_manager.VDeviceResponse_ReasonType" json:"Reason,omitempty"`
}

func (m *VDeviceResponse) Reset()                    { *m = VDeviceResponse{} }
func (m *VDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*VDeviceResponse) ProtoMessage()               {}
func (*VDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VDeviceResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *VDeviceResponse) GetReason() VDeviceResponse_ReasonType {
	if m != nil {
		return m.Reason
	}
	return VDeviceResponse_INSUFFICIENT_RESOURCE
}

func init() {
	proto.RegisterType((*VDeviceRequest)(nil), "vDevice_manager.VDeviceRequest")
	proto.RegisterType((*VDeviceResponse)(nil), "vDevice_manager.VDeviceResponse")
	proto.RegisterEnum("vDevice_manager.VDeviceResponse_ReasonType", VDeviceResponse_ReasonType_name, VDeviceResponse_ReasonType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VDeviceManager service

type VDeviceManagerClient interface {
	RegisterVDevice(ctx context.Context, in *VDeviceRequest, opts ...grpc.CallOption) (*VDeviceResponse, error)
}

type vDeviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewVDeviceManagerClient(cc *grpc.ClientConn) VDeviceManagerClient {
	return &vDeviceManagerClient{cc}
}

func (c *vDeviceManagerClient) RegisterVDevice(ctx context.Context, in *VDeviceRequest, opts ...grpc.CallOption) (*VDeviceResponse, error) {
	out := new(VDeviceResponse)
	err := grpc.Invoke(ctx, "/vDevice_manager.VDeviceManager/RegisterVDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VDeviceManager service

type VDeviceManagerServer interface {
	RegisterVDevice(context.Context, *VDeviceRequest) (*VDeviceResponse, error)
}

func RegisterVDeviceManagerServer(s *grpc.Server, srv VDeviceManagerServer) {
	s.RegisterService(&_VDeviceManager_serviceDesc, srv)
}

func _VDeviceManager_RegisterVDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDeviceManagerServer).RegisterVDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vDevice_manager.VDeviceManager/RegisterVDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDeviceManagerServer).RegisterVDevice(ctx, req.(*VDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VDeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vDevice_manager.VDeviceManager",
	HandlerType: (*VDeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterVDevice",
			Handler:    _VDeviceManager_RegisterVDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdevice-manager.proto",
}

func init() { proto.RegisterFile("vdevice-manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xd1, 0x4e, 0x83, 0x30,
	0x18, 0x85, 0xc7, 0x12, 0x89, 0xfe, 0x4b, 0x80, 0xd5, 0xcc, 0x4c, 0x6f, 0x24, 0x5c, 0x2d, 0x51,
	0xb9, 0x98, 0x8f, 0x00, 0x25, 0x69, 0xa2, 0xcc, 0x94, 0x8d, 0x0b, 0x6f, 0x10, 0xe7, 0x9f, 0x49,
	0xe2, 0x00, 0x5b, 0x20, 0xf1, 0xed, 0x7c, 0x34, 0x43, 0xc1, 0x2d, 0x21, 0x31, 0xde, 0xb5, 0xdf,
	0x7f, 0x7a, 0x7a, 0x7a, 0x0a, 0xb3, 0xe6, 0x0d, 0x9b, 0x6c, 0x8b, 0x77, 0xfb, 0x34, 0x4f, 0x77,
	0x28, 0xdc, 0x52, 0x14, 0x55, 0x41, 0xcc, 0xc6, 0x57, 0x38, 0xe9, 0xb1, 0xf3, 0x02, 0x46, 0xdc,
	0x21, 0x8e, 0x9f, 0x35, 0xca, 0x8a, 0xd8, 0x30, 0xf1, 0x8a, 0xbc, 0x4a, 0xb3, 0x1c, 0x05, 0xf3,
	0xe7, 0x9a, 0xad, 0x2d, 0xce, 0xf8, 0x64, 0x7b, 0x44, 0xe4, 0x16, 0xa6, 0xbd, 0xb8, 0x3f, 0x1a,
	0xd6, 0xfb, 0xf9, 0xd8, 0xd6, 0x16, 0x27, 0x7c, 0x2a, 0x86, 0x03, 0xe7, 0x5b, 0x03, 0xf3, 0x70,
	0x85, 0x2c, 0x8b, 0x5c, 0x22, 0xb9, 0x00, 0x9d, 0xa3, 0xac, 0x3f, 0x2a, 0x65, 0x7f, 0xca, 0x75,
	0xa1, 0x76, 0xc4, 0x6b, 0x79, 0x2a, 0x8b, 0x5c, 0xd9, 0x19, 0xcb, 0x1b, 0x77, 0x90, 0xd7, 0x1d,
	0x38, 0xb9, 0x9d, 0x7c, 0xfd, 0x55, 0x62, 0x6b, 0xd2, 0xae, 0x9d, 0x27, 0x80, 0x23, 0x25, 0x97,
	0x30, 0x63, 0x61, 0xb4, 0x09, 0x02, 0xe6, 0x31, 0x1a, 0xae, 0x13, 0x4e, 0xa3, 0xd5, 0x86, 0x7b,
	0xd4, 0x1a, 0x11, 0x02, 0x86, 0x4f, 0x63, 0xe6, 0xd1, 0x64, 0x15, 0x04, 0x0f, 0x2c, 0xa4, 0x96,
	0x46, 0xce, 0xc1, 0xfc, 0x55, 0x24, 0x11, 0x65, 0xcf, 0xd4, 0xb7, 0xc6, 0xcb, 0xf7, 0x43, 0x49,
	0x8f, 0x5d, 0x0c, 0x12, 0x83, 0xc9, 0x71, 0x97, 0xc9, 0x0a, 0x45, 0x3f, 0x21, 0xd7, 0x7f, 0x67,
	0x55, 0x95, 0x5c, 0xd9, 0xff, 0x3d, 0xc6, 0x19, 0xbd, 0xea, 0xea, 0x9b, 0xee, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8b, 0x31, 0xc1, 0x7c, 0xbf, 0x01, 0x00, 0x00,
}
